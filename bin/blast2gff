#!/usr/bin/env perl
# Created: 14 Jun 2015

use warnings;
use strict;

use Pod::Usage;
use Getopt::Long;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;
use FindBin qw($Script);

## Debug
use Data::Dumper;
$Data::Dumper::Sortkeys=1;

use Blast::Parser;
use Gff::Feature;


=head1 NAME

blast2gff

=head1 SYNOPSIS

blast2gff [options] args

=head1 OPTIONS

=over

=item

=back

=head1 MAIN

=cut


##----------------------------------------------------------------------------##
# Globals
##----------------------------------------------------------------------------##

our $VERSION = 0.1.0;

Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$Script.q(] %m%n
)));

my $L = Log::Log4perl->get_logger();


##----------------------------------------------------------------------------##
# Main
##----------------------------------------------------------------------------##

my %opt = init();

$L->info("Reading ".( defined $opt{in} ? "$opt{in}" : "STDIN"));

my $bp = Blast::Parser->new(file => $opt{in});

my %id;
my $ofh = $opt{ofh};

print $ofh "##gff-version 3\n";

while (my $hsp = $bp->next_hsp) {
    my ($start, $end, $strand) = $hsp->send > $hsp->sstart
        ? ($hsp->sstart, $hsp->send, '+')
        : ($hsp->send, $hsp->sstart, '-');

    my $id = $hsp->qseqid;
    %id = () unless exists $id{$id};
    $id.=":".++$id{$hsp->qseqid};

    print $ofh Gff::Feature->new(
        seqid => $hsp->sseqid,
        source => $opt{source},
        type => "match",
        start => $start,
        end => $end,
        score => $hsp->evalue,
        strand => $strand,
        phase => '.',
        attributes => {
            ID => [$id]
        },
    )->string;
}





##----------------------------------------------------------------------------##
# subs
##----------------------------------------------------------------------------##


=head2 prep

=cut

sub init{
    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    my %opt = (
        blast => undef,
        source => 'blastn'
    );

    GetOptions(
        \%opt, qw(
                     in=s
                     source=s
                     version|V!
                     debug|D!
                     help|h!
             )
    ) or $L->logcroak('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print "$VERSION\n";
        exit 0;
    }

    # Config + Opt
    if (! defined $opt{in} && @ARGV){$opt{in} = shift @ARGV;}
    
    $L->logdie("unused argument: @ARGV") if @ARGV;

    if ( $opt{out} && $opt{out} ne '-' ){
        open(my $ofh, '>', $opt{out}) or $L->logdie("$!: $opt{out}");
        $opt{ofh} = $ofh;
    }else {
        $opt{ofh} = \*STDOUT;
    }

    # required stuff
    for (qw()) {
       if (ref $opt{$_} eq 'ARRAY') {
           pod2usage("required: --$_") unless @{$opt{$_}}
       } else {
           pod2usage("required: --$_") unless defined ($opt{$_})
       }
    }


    # debug level
    $L->level($DEBUG) if $opt{debug};
    $L->debug('Verbose level set to DEBUG');

    $L->debug(Dumper(\%opt));

    return %opt;
}



=head1 AUTHOR

Thomas Hackl, E<lt>thackl@YaxchilanE<gt>

=cut
