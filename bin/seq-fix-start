#!/usr/bin/env perl
# Created: 07 Mar 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Fasta::Parser;
use FindBin;
use File::Temp qw(tempfile);

my $usage =
"Usage: seq-fix-start [options] assembly.fa

Note: Expects blast+ and exonerate in PATH";

my $desc = "

Reset the start of circular sequences to a gene of choice, by default dnaN. For
--status 'closed' (or 'auto' with only one sequence in the assembly), the
sequence with the best hit to the new start protein is assumed to be a complete
circular chromosome, so it is split, if appropriate reverse-complemented, and
the split parts are rejoined to retain the complete circular chromosome.

If --status is 'draft' or 'auto' with multiple sequences in the assembly, the
contig containing the best hit to the new start genes is only split and
reverse-complemented if appropriate, but not rejoined.

By default, the start is identified based on the best hit to a non-redundant
collection of dnaN genes obtained from Pfam. To use a custom gene, simply
provide a fasta file with one or more protein sequences. The best hit out of the
provided sequences based on an initial blast search will be used to identify the
new start coordinates. To avoid issues with local alignments obtained from
blast, the best hit protein is realign using exonerate to obtain the final
coordinates.";

GetOptions (
    "out|o=s" => sub { '-' ne $_[1] and open(STDOUT, '>', $_[1]) || die $! },
    "protein|p=s" => \(my $prot_file = "$FindBin::Bin/../data/seq-fix-start/dnaN-PF02767_rp75.faa"),
    "status|s=s" => \(my $asm_status = 'auto'),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

($asm_status) = grep{$_ eq $asm_status}qw(auto closed draft);
$asm_status || die "Assembly status need to be one of 'auto', 'closed' or 'draft'";

if ($help || @ARGV != 1){
    print "$usage\n\n";
    printf " %-19s  %s\n", "-p/--protein", "start protein [$prot_file]";
    printf " %-19s  %s\n", "-s/--status", "Assembly status, one of 'draft','closed' or 'auto' ['auto']";
    printf " %-19s  %s\n", "-o/--out", "write to this file [STDOUT]";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    print "$desc\n";
    exit 0;
}

my $asm_file = $ARGV[0];
my $fp = Fasta::Parser->new(file=> $asm_file);
my $prot_db = Fasta::Parser->new(file=>$prot_file);

## makeblastdb
if (! -e "$prot_file.phr") {
    print STDERR "creating blast db";
    qx(makeblastdb -in $prot_file -dbtype prot);
}

## get best candidate protein using blast
my $blast_cmd = "blastx -db $prot_file -query $asm_file -outfmt 7 -max_target_seqs 5";
print STDERR "running blast\n";
open(BLAST, "-|", $blast_cmd);
my $top_hit;
my $hit;
my $hit_n;
my $asm_seq_n;
my @best_hit;
while(<BLAST>){
    if(/^# Query/){ $asm_seq_n++; $top_hit++ };
    if(/^[^#]/ && $top_hit){
        $top_hit = 0; # only top hit
        my @hit = split("\t", $_);
        $hit_n++;
        if(!@best_hit){
            @best_hit = @hit
        }elsif ($best_hit[11] < $hit[11]) { # best score
            @best_hit = @hit
        }
    }
}
close(BLAST);

if ($asm_status eq 'auto') {
    if ($asm_seq_n >1) {
        $asm_status = 'draft';
        print STDERR "assembly status: $asm_status (auto w/ has multiple contigs)\n";
    }else{
        $asm_status = 'closed';
        print STDERR "assembly status: $asm_status (auto w/ a single contig)\n";
    }
}else {
    print STDERR "assembly status: $asm_status\n";
}

if (!@best_hit) {
    print STDERR "No hits to start proteins found. Exiting.";
    exit 0;
}else {
    print STDERR "Best hit (out of $hit_n possible hits):\n";
    print STDERR join("\t", @best_hit);
}


# retrieve best hit seq from db to speed up exonerate
my ($tmp, $best_prot_file) = tempfile();
while(my $prot_seq = $prot_db->next_seq){
    if ($prot_seq->id() eq $best_hit[1]){ print $tmp $prot_seq; }
}

## --genetic-code 4 for Mycoplasmen
my $exonerate_cmd = "exonerate -n 1 -m protein2dna --percent 80 --showalignment FALSE $best_prot_file $asm_file";
open(HIT, "-|", $exonerate_cmd);
while(<HIT>){
    if(/^vulgar/){$hit=$_; last;}
}
close(HIT);

if(!defined($hit)){
    die "Failed to realign protein with exonerate!\n";}
else{
    print STDERR "Exonerate-refined hit:\n$hit";
}

chomp($hit);

my ($vulgar, $query_id, $query_start, $query_end, $query_strand,
    $target_id, $target_start, $target_end, $target_strand,
    $score, $extra) = split(" ", $hit, 11);

#print STDERR "$target_start\t$target_end\t$target_strand\n";

while(my $fs = $fp->next_seq){
    if($fs->id eq $target_id){
	my ($f1, $f2);
	if($target_strand eq '+'){
            print STDERR "splitting sequence ", $fs->id, "\n";
	    $f1 = $fs->substr_seq($target_start);
	    $f2 = $fs->substr_seq(0,$target_start);
	}else{
            print STDERR "splitting and reverse-complementing sequence ", $fs->id, "\n";
            $f1 = $fs->substr_seq(0,$target_start)->reverse_complement;
	    $f2 = $fs->substr_seq($target_start)->reverse_complement;
	}
        if ($asm_status eq 'closed') {
            print STDERR "recircularizing ", $fs->id, "\n";
            print $f1.$f2;
        }else {
            $f2->id(($f2->id)."b"),
            print $f1,$f2;
        }
    }else {
        print $fs;
    }
}
