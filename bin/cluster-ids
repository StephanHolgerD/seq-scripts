#!/usr/bin/env perl
use warnings;
no warnings 'qw';
use strict;

use Carp;
use Getopt::Long;
use Pod::Usage;
use FindBin;
use Log::Log4perl qw(:easy :no_extra_logdie_message);
use Data::Dumper;
$Data::Dumper::Sortkeys=1;
use Cwd;
use File::Spec;
use File::Basename;
use File::Path qw(make_path remove_tree);
use File::Temp;

use Graph;

our $VERSION = '0.01';


##------------------------------------------------------------------------##
=head1 NAME 

cluster-ids

=cut

=head1 DESCRIPTION

Cluster a list of id 1-to-1 relations.

=cut


##------------------------------------------------------------------------##
=head1 CHANGELOG

=cut

=head2 0.01

=over

=item [Initial]

=back

=cut


=head1 TODO

=cut

##------------------------------------------------------------------------##
=head1 SYNOPSIS

  cluster-ids [<OPTIONS>] IDSFILE [IDSFILE2 ...]
  cat IDSFILE | cluster-ids [<OPTIONS>]

=cut

=head1 OPTIONS

=over

=item [--debug]

Turn on debug messages.

=item [--quiet]

Supress verbose information messages.

=item [-h|--help]

Show this help screen

=back

=cut



Log::Log4perl->init(\<<'CFG');
	log4perl.logger.main				= DEBUG, Screen
	log4perl.appender.Screen			= Log::Log4perl::Appender::Screen
	log4perl.appender.Screen.stderr		= 0
	log4perl.appender.Screen.layout		= PatternLayout
	log4perl.appender.Screen.layout.ConversionPattern = [%d{MM-dd HH:mm:ss}] [blat.pl] %m%n

CFG

my $L = Log::Log4perl::get_logger();
$L->level($INFO);


my %opt = (
);

Getopt::Long::Configure("no_ignore_case");
GetOptions(\%opt, qw(
	quiet
	debug
	help|h
)) or pod2usage(1);

$opt{help} && pod2usage(1);

$opt{quiet} && $L->level($WARN);
$opt{debug} && $L->level($DEBUG);

$L->debug("GetOptions:\n", Dumper(\%opt));

# required	
for(qw()){
	pod2usage("required: --$_") unless defined ($opt{$_}) 
};

##------------------------------------------------------------------------##	


my $G = Graph->new(
	directed => 1,
#	unionfind => 1,
);


while(<>){
	chomp();
	my ($k, $v) = split(/\t/, $_);
	$G->add_edge($k, $v) unless $k eq $v;
}

print STDERR "$G\n";
#print STDERR Dumper($G);

my @cc = sort{$a->[0] cmp $b->[0]}map{[sort @$_]}$G->weakly_connected_components();
print join("\t", @$_)."\n" for @cc;






=head1 DEPRECATED

my $C = Clusters->new();

while(<>){
	chomp();
	my ($k, $v) = sort split(/\t/, $_);
	$C->add_relation($k, $v);
}

print Dumper($C);

$C->cluster();

print Dumper($C);


#while (my ($k, $vr) = each %H){
#	foreach my $v(@$vr){
#		if(exists $H{$v}){
#			print Dumper({v=>$v, Hv=>$H{$v}, Hk=>$H{$k} });
#			push @{$H{$v}}, @{$H{$k}};
#			delete $H{$k};
#			print Dumper(Hv=>$H{$v});
#			last;
#		}
#	}
#}
#
#print Dumper(\%H);


package Clusters;

sub new{
	return bless {}, shift;
}

sub add_relation{
	my $self = shift;
	my $k = shift;
	exists $self->{$k} ? $self->{$k}{$k}++ : ($self->{$k} = {$k=>1});
	foreach my $v(@_){
		if(ref $v){ # add counts
			while(my ($kk, $vv) = each %$v){
				$self->{$k}{$kk}+=$vv;
			}
		}elsif($self->{$v}){ # merge and remove
			while(my ($kk, $vv) = each %{$self->{$v}}){
				$self->{$k}{$kk}+=$vv;
			}
			delete $self->{$v};
		}else{ # simple incr
			$self->{$k}{$v}++ 
		} 
	}
}

sub cluster{
	my $self = shift;
	foreach my $c (keys %$self){
		print "c: $c\n";
		while(my $k = each %{$self->{$c}}){
			print "\tk: $k\n";
			next if $k eq $c; #self
			if(exists $self->{$k}){
				$C->add_relation($c, $k);
			}
		}
	}
}

=cut

