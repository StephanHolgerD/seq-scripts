#!/usr/bin/env perl
# Created: 25 May 2017
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;

use Fastq::Parser;
use Fasta::Parser;

use Math::Interpolate qw(linear_interpolate robust_interpolate);
use File::Temp qw/ tempfile tempdir /;

GetOptions (
    "p=f" => \(my $opt_p),
    "gc|g=s" => \(my $opt_gc),
    "linaer|l!" => \(my $opt_linear),
    "seed|s=i" => \(my $opt_seed),
    "plot!" => \(my $opt_plot=1),
    "help|h!" => \(my $opt_help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($opt_help){
    print "sample sequences from file, with optional biases\n";
    print "Usage: seq-sample [options] in.fa/fq > out.fa/fq\n";
    printf " %-16s  %s\n", "-p/--prob", "sampling probability";
    printf " %-16s  %s\n", "-g/--gc", "string/file of tuples of GC-percentage and probability";
    printf " %-16s  %s\n", "", "e.g. '20:0.3,50:0.5,70:0.3', or a csv/tsv file. A continuous";
    printf " %-16s  %s\n", "", "spectrum will be generated by interpolatation ";
    printf " %-16s  %s\n", "-l/--linear", "Perform linear rather than smoothed interpolation";
    printf " %-16s  %s\n", "-s/--seed", "random number seed";
    printf " %-16s  %s\n", "--no-plot", "don't plot GC/probabilities spectrum";
    printf " %-16s  %s\n", "-h/--help", "show this help";
    printf " %-16s  %s\n", "-D/--debug", "show debug messages";
    exit 0;
}

my $seed = $opt_seed ? srand($opt_seed) : srand;
print STDERR "Random seed: ",$seed, "\n";

my @fp_opt = @ARGV ? (file => $ARGV[0]) : ();

my $fp = Fastq::Parser->new(@fp_opt)->check_format() ||
    Fasta::Parser->new(@fp_opt)->check_format() ||
    {die "Input needs to be fastq or fasta"};

if (defined($opt_p)) {
    die "Sorry, not yet implemented\n";
}

if ($opt_gc) {
    my $GC = parse_opt_gc();
    plot_gc($GC) if $opt_plot;

    while (my $f=$fp->next_seq) {
        my $fs = $f->seq();
        my $gc_num = $fs =~ tr/gGcC//;
        my $gc = int($gc_num/length($fs)*1000)/10; # round to one digit
        
        print $f if rand() < $GC->{$gc};
    }
}


sub parse_opt_gc{
    if (-f $opt_gc) { ## slurp file to string
        $opt_gc = do { local(@ARGV, $/) = $opt_gc; <> };
    }

    my @xy = split(/[,;\n]/, $opt_gc);
    my @x;
    my @y;
    for (my $i=0;$i<@xy;$i++) {
        if ($xy[$i] =~ /([.\d]+)[ :\t]([.\d]+)/) {
            $x[$i] = $1;
            $y[$i] = $2;
        }else {
            die "poorly formatted tuple: $xy[$i]\n"
        }
    }
    
    die "at least to probabilites for GC required" if @x < 2;
    my @gc = map{$_/10}0..1000;
    my %gc; # cache gc prob spectrum
    foreach my $gc (@gc) {
        my ($prob) = $opt_linear
            ? linear_interpolate($gc, \@x, \@y)
            : robust_interpolate($gc, \@x, \@y);
        $prob = 0 if $prob < 0;
        $gc{$gc} = $prob;
    }
    return \%gc;
}

sub plot_gc{
    my $gc = shift;

    print STDERR "Plotting GC probabily spectrum with R and library 'txtplot'\n";

    my $tmp = '/tmp/seq-sample.tsv';
    open(TMP, '>', $tmp) or die $!;
    while (my($k, $v) = each %$gc){ print TMP "$k\t$v\n" }
    close TMP;

    open(R, "|-", "Rscript - $tmp 1>&2") or die $!;
    print R rcode();
    close R;

    unlink $tmp;

    print STDERR "NOTE: The plot is purely informative, any errors thrown by R can be ignored\n";
}

sub rcode{
<<'RCODE'
#!/usr/bin/env Rscript
library(txtplot)
args = commandArgs(trailingOnly=TRUE)
print(args)
d1 <- read.table(args[1])
colnames(d1) <- c("x", "y")
txtplot(d1$x, d1$y, ylim=c(0,1), height=25)
RCODE
}
