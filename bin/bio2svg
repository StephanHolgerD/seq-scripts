#!/usr/bin/env perl
use strict;
use warnings;

use Pod::Usage;
use Getopt::Long;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;
use FindBin qw($Script);
use File::Basename;
use File::Which;

use Bio::Tools::GFF;
use Bio::FeatureIO::gff;
use Bio::SeqIO;

use lib '.';
use SVG;
# http://perlmaven.com/scalable-vector-graphics-with-perl
# https://metacpan.org/pod/SVG

use SVG::Bio;

use Sam::Parser;
use Fasta::Parser;

## Debug
use Data::Dumper;
$Data::Dumper::Sortkeys=1;

=head1 NAME

bio2svg

=head1 SYNOPSIS

  bio2svg --gff my.gff --bam my.bam --out my.svg

=head1 OPTIONS

=over

=item --gff

=back

=head1 MAIN

=cut


##---------------------------------------------------------------------------##
# Globals
##---------------------------------------------------------------------------##

our $VERSION  = '0.4.0';

Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$Script.q(] %m%n
)));

my $L = Log::Log4perl->get_logger();


##---------------------------------------------------------------------------##
# Main
##---------------------------------------------------------------------------##


my %opt = prep();
my $svg = init_svg();

fasta2svg();
gff2svg();
bam2svg();

#print STDERR Dumper($svg);

finish_svg();

print {$opt{ofh}} $svg->xmlify;


##----------------------------------------------------------------------------##
# subs
##----------------------------------------------------------------------------##

=head2 prep

=cut

sub prep{
    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    my %opt = (
        gff => 'MaV-gen-2.0.gff',
        gff_version => 3,
        bam => 'MaV-gen-2.0.bam',
        samtools_path => undef,
        samtools => undef,
        region => "",
        margin => 100,
        width => 1000,
    );

    GetOptions(
        \%opt, qw(
                     out=s
                     fa|fasta=s
                     gff=s
                     gff_version=s
                     bam=s
                     samtools_path=s
                     region=s
                     margin=i
                     width=i
                     version|V!
                     debug|D!
                     help|h!
             )
    ) or $L->logcroak('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print "$VERSION\n";
        exit 0;
    }

    # Config + Opt

    $L->logdie("unused argument: @ARGV") if @ARGV;

    if ( $opt{out} && $opt{out} ne '-' ){
        open(my $ofh, '>', $opt{out}) or $L->logdie("$!: $opt{out}");
        $opt{ofh} = $ofh;
    }else {
        $opt{ofh} = \*STDOUT;
    }

    # required stuff
    for (qw(fa)) {
       if (ref $opt{$_} eq 'ARRAY') {
           pod2usage("required: --$_") unless @{$opt{$_}}
       } else {
           pod2usage("required: --$_") unless defined ($opt{$_})
       }
    }


    # debug level
    $L->level($DEBUG) if $opt{debug};
    $L->debug('Verbose level set to DEBUG');

    $L->debug(Dumper(\%opt));

    # check binaries
    if ($opt{bam}) {
        my $samtools = bin("samtools");
        check_binary($samtools, ["--version", "1.1"]);
        $opt{samtools} = bin("samtools");
    }
    return %opt;
}


=head2 init_svg

=cut

sub init_svg{
    my (%p) = @_;

    $L->info("Setting up canvas");


    my $svg = SVG::Bio->new();

    my $css = $svg->style(type=>"text/css");
    my $css_spec;
    {
        local $/ = undef;
        $css_spec = <DATA>;
    }
    $css->CDATA($css_spec);

    return $svg;
}


=head2 finish_svg

=cut

sub finish_svg{
    my (%p) = @_;

    # sum up track heights + margins
    my $ptl = $svg->{-tracks}[-1]{-layout};
    my $vb_height = $ptl->{track_base}
        + $ptl->{track_height}
            + $ptl->{track_padding}
                + $opt{margin}*2;


    # region + margins
    my $vb_width = $opt{to} - $opt{from} + $opt{margin}*2;

    my $width = $opt{width};
    my $height = int(($vb_height * $width / $vb_width)+.5);

    $svg->{-document}{width} = $width;
    $svg->{-document}{height} = $height;

    $L->debug("$opt{margin} $opt{margin} $vb_width $vb_height");
    $svg->{-document}{viewBox} = ($opt{from}-$opt{margin})." -$opt{margin} $vb_width $vb_height";

}


=head2 gff2svg

=cut

sub gff2svg{
    my (%p) = @_;
    $L->info("Processing GFF");

    my $track = $svg->track(
        class => "genes",
        -type => "gff",
    );

    # Initialise input stream
    my $gffio = Bio::Tools::GFF->new(-file => $opt{gff}, -gff_version => $opt{gff_version}) or die $!;

    # TODO: scale (/axis)
    #$track->line(x1=>0, x2=>1000, y1=>50, y2=>50, Style("genome1"));

    # Initialise storage for features
    my %genes = ();

    #my $type = "region";
    my $type = "gene";
    #my $source = "BLAST";
    my $source = "prokka";

    # Loop over the input stream
    while (my $feature = $gffio->next_feature()) {
        my $primary_tag =  $feature->primary_tag();
        my $source_tag =  $feature->source_tag();

        next unless ( $primary_tag eq $type && $source_tag eq $source );

        if ( defined($opt{to})) {
            next unless _overlaps_ranges([$feature->start, $feature->end], [[$opt{from}, $opt{to}]]);
        }

        my ($id) = $feature->get_tag_values('ID');
        $genes{$id} = $feature;
    }

    foreach my $gi (sort{$genes{$a}->start <=> $genes{$b}->start}keys %genes) {
        $track->arrow(
            id => $gi,
            x => $genes{$gi}->start,
            to => $genes{$gi}->end,
            -strand => $genes{$gi}->strand,
            class => "gene",
        );
    }

    $track->track_refine;

}


=head2 bam2svg

=cut

sub bam2svg{
    my (%p) = @_;
    $L->info("Processing BAM");

    my $track = $svg->track(
        -type => "bam",
        class => "reads",
        -layout => {
        },
    );

    # init sam parser
    my $sam_cmd = "$opt{samtools} view -h $opt{bam} |";
    $L->debug($sam_cmd);
    open(SAM, $sam_cmd) or $L->logdie($!);
    my $sp = Sam::Parser->new(fh => \*SAM);

    open(SAM, "$opt{samtools} view $opt{bam} $opt{region} |") or $L->logdie($!);
    while(my $aln = $sp->next_aln()){
        next if $aln->is(0x4 | 0x100 | 0x800); # unmapped or secondary or supplementary
        $track->block(
            id => $aln->qname,
            x => $aln->pos,
            width => length($aln->seq_aligned),
            -strand => $aln->is(0x16) ? '-' : '+',
            class => "read",
        );
    }

    $track->track_refine;
}


sub fasta2svg{
    my (%p) = @_;

    $L->info("Processing FASTA");

    unless ( -e $opt{fa}.".fai") {
        qx($opt{samtools} faidx $opt{fa});
    }

    my $fa = Fasta::Seq->new(scalar qx($opt{samtools} faidx $opt{fa} $opt{region}));
    if ( $opt{region} =~ /:([0-9,]+)(?:-[0-9,]+)$/ ){
        $opt{from} = $1;
        $opt{from} =~ s/,//g;
    }else {
        $opt{from} = 0;
    }

    $opt{to} = $opt{from} + length($fa->seq);

    my $track = $svg->track(
        -layout => {
            track_row_height => 10
        }
    );

    $track->axis(
        x => $opt{from},
        to => $opt{to},
        class => "axis",
    );

     $track->track_refine;
}







##---------------------------------------------------------------------------##
# auxiliaries
##---------------------------------------------------------------------------##

=head2 bin

Return full binary path based on $opt{<bin_path}.

=cut

sub bin{
    my ($bin) = @_;
    if (exists $opt{$bin."_path"} && $opt{$bin."_path"}) {
        return $opt{$bin."_path"}."/".$bin;
    } else {
        return $bin;
    }
}

=head2 check_binary

Check whether a required binary (and version) exists.

=cut


sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
        if ($fbin = which($bin)) {
            $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
        } else {
            $L->logdie("Binary '$bin' neither in PATH nor executable");
        }
    }

    $bin = basename($fbin);

    my $v;
    if ($ver) {
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";

        my $vs = qx($fbin $ver->[0]);
        if ($? or ! $vs) {
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }

        ($v) = $vs =~ /(\S+?)\D*$/m;

        if (version->parse($v) < version->parse($ver->[1])) {
            $L->logdie("Version $v of '$bin' < $v");
        }

    }

    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));

}


=head2 _overlaps_ranges

Test if a value/range overlaps a given set of ranges. ranges are expected in
[FROM, TO] format.

  _is_in_range(5, [[0, 3], [4,7]])
  _is_in_range([2,2], [[0, 3], [4,7]])

=cut

sub _overlaps_ranges{
    my ($c, $ranges) = @_;
    die __PACKAGE__."::_is_in_range: requires exactly to arguments: VALUE or RANGE[OFFSET, LENGTH],  RANGES[[OFFSET, LENGTH][OFFSET, LENGTH]]" unless @_ == 2;

    if (ref $c eq "ARRAY") {
        my $c1 = $c->[0];
        my $c2 = $c->[1];
        for my $r (@$ranges){
            if (
                ($c1 >= $r->[0] && $c1 <= $r->[1]) ||
                ($c2 >= $r->[0] && $c2 <= $r->[1])
            ){
                return 1;
            }
        }
    }elsif (! ref $c) {
        for my $r (@$ranges){
            return 1 if $c >= $r->[0] && $c <= $r->[1];
        }
    }else {
        die __PACKAGE__."::_is_in_range: first arguments needs to be SCALAR or ARRAY ref";
    }
    return 0;
}

__DATA__
.read {
    fill: chocolate;
    stroke: chocolate;
    stroke-linejoin: round;
}
.read.rc {
    fill: brown;
    stroke: brown;
}
.gene {
    fill: darkblue;
    stroke: darkblue;
    stroke-linejoin: round;
}
.gene.rc {
    fill: darkgreen;
    stroke: darkgreen;
    stroke-linejoin: round;
}
line {
    stroke: black;
    stroke-width: 5;
}
