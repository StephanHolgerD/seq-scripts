#!/usr/bin/env perl
use strict;
use warnings;

use Pod::Usage;
use Getopt::Long;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;
use FindBin qw($Script);
use File::Basename;
use File::Which;
use File::Temp;

use Sam::Parser;
use Fasta::Parser;

use Gff::Parser 0.2.0;
use Gff::Feature 0.2.0;

use SVG;
use SVG::Bio 0.5.1;


## Debug
use Data::Dumper;
$Data::Dumper::Sortkeys=1;

=head1 NAME

bio2svg

=head1 SYNOPSIS

  bio2svg --gff my.gff --bam my.bam --out my.svg

=head1 OPTIONS

=over

=item --gff

=back

=head1 MAIN

=cut


##---------------------------------------------------------------------------##
# Globals
##---------------------------------------------------------------------------##

our $VERSION  = '0.6.0';

Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$Script.q(] %m%n
)));

my $L = Log::Log4perl->get_logger();


##---------------------------------------------------------------------------##
# Main
##---------------------------------------------------------------------------##


my %opt = prep();
my $svg = init_svg();

my $cvs = $svg->canvas();

#print STDERR Dumper(\%opt);

fasta2svg();
gff2svg(gff => $_) foreach @{$opt{gff}};
bam2svg(bam => $_) foreach @{$opt{bam}};

#print STDERR Dumper($svg);

finish_svg();

print {$opt{ofh}} $svg->xmlify;


##----------------------------------------------------------------------------##
# subs
##----------------------------------------------------------------------------##

=head2 prep

=cut

sub prep{
    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    my %opt = (
        gff => undef,
        gff_version => 3,
        bam => undef,
        samtools_path => undef,
        samtools => undef,
        region => undef,
        margin => 100,
        width => undef,
        height => undef,
    );

    GetOptions(
        \%opt, qw(
                     out=s
                     fa|fasta=s
                     gff=s@
                     gff_version=s
                     bam=s@
                     samtools_path=s
                     region=s
                     margin=i
                     width=i
                     height=i
                     version|V!
                     debug|D!
                     help|h!
             )
    ) or $L->logcroak('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print "$VERSION\n";
        exit 0;
    }

    # Config + Opt

    $L->logdie("unused argument: @ARGV") if @ARGV;

    if ( $opt{out} && $opt{out} ne '-' ){
        open(my $ofh, '>', $opt{out}) or $L->logdie("$!: $opt{out}");
        $opt{ofh} = $ofh;
    }else {
        $opt{ofh} = \*STDOUT;
    }

    # required stuff
    for (qw(fa region)) {
       if (ref $opt{$_} eq 'ARRAY') {
           pod2usage("required: --$_") unless @{$opt{$_}}
       } else {
           pod2usage("required: --$_") unless defined ($opt{$_})
       }
    }


    # debug level
    $L->level($DEBUG) if $opt{debug};
    $L->debug('Verbose level set to DEBUG');

    $L->debug(Dumper(\%opt));

    # check binaries
    my $samtools = bin("samtools");
    check_binary($samtools, ["--version", "1.1"]);
    $opt{samtools} = bin("samtools");

    return %opt;
}


=head2 init_svg

=cut

sub init_svg{
    my (%p) = @_;

    $L->info("Setting up canvas");

    # read css
    my $css_spec;
    { local $/ = undef; $css_spec = <DATA>; }

    my $svg = SVG::Bio->new();

    $svg->style(type=>"text/css")->CDATA($css_spec);

    return $svg;
}


=head2 finish_svg

=cut

# finalize sound better
sub finish_svg{
    my (%p) = @_;

    # sum up track heights + margins
    my $pt = $cvs->{-tracks}[-1];
    $pt->track_refine;
    my $ptl = $pt->{-layout};

    my $cv_height = $ptl->{track_base}
        + $ptl->{track_height}
            + $ptl->{track_padding};
    my $vb_height = $cv_height + $opt{margin}*2;


    # region + margins
    my $cv_width = $opt{to} - $opt{from};
    my $vb_width = $cv_width + $opt{margin}*2;

    my $width = $opt{width};
    my $height = $opt{height};
    $width || $height || ($height = 200);

    $height ||= int(($vb_height * $width / $vb_width)+.5);
    $width ||= int(($vb_width * $height / $vb_height)+.5);

    $svg->{-document}{preserveAspectRatio} = "none";
    $svg->{-document}{width} = $width;
    $svg->{-document}{height} = $height;

    $svg->getElementByID("canvas-clip-rect")->{'x'} = $opt{from};
    $svg->getElementByID("canvas-clip-rect")->{'width'} = $cv_width;
    $svg->getElementByID("canvas-clip-rect")->{'height'} = $cv_height;

    $L->debug("$opt{margin} $opt{margin} $vb_width $vb_height");
    $svg->{-document}{viewBox} = ($opt{from}-$opt{margin})." -$opt{margin} $vb_width $vb_height";

}


=head2 gff2svg

=cut

sub gff2svg{
    my (%p) = @_;
    $L->info("Processing GFF\t[$p{gff}]");

    my %target_types = (
        match => 1,
        gene => 1,
        CDS => 1,
        exon => 1,
        mRNA => 1,
    );

    # Initialise input stream
    my $gp = Gff::Parser->new(
        file => $p{gff},
        region => {
            id => $opt{id},
            from => $opt{from},
            to => $opt{to}
        }
    ) or die $!;

    $gp->add_condition(sub{ $target_types{$_[0]->type} });

    my $track = $cvs->track(
        class => "genes",
        -type => "gff",
        -layout => {
            track_padding => 400,
            stacking => undef,
	    track_row_height => 1000,
        }
    );

    while (my $gs = $gp->next_groups) {
        # matches
        foreach my $g ( sort{$a->{primary}->start <=> $b->{primary}->start}@{$gs->{groups}{match}} ) {
            my $match = $g->{primary};
            $track->arrow(
                id => idfy($match->id),
                x => $match->start,
                to => $match->end,
                -strand => $match->strand,
                class => "match",
                -layout => {
#                    arrow_rel_height => 3,
#                    arrow_rel_width => 2.4,
                    feature_rel_height => .4,

                },
            );
        }

        # genes
        foreach my $g ( sort{$a->{primary}->start <=> $b->{primary}->start}@{$gs->{groups}{gene}} ) {
            my $gene = $g->{primary};
            #my @exons = sort{$a->start <=> $b->start}@{$g->{children}{exon}};
            next unless (exists $g->{children}{CDS} && @{$g->{children}{CDS}});
            my @cdss = sort{$a->start <=> $b->start}@{$g->{children}{CDS}};

            my $rc = $gene->strand eq '-';

            if ($rc) {
                # @exons = reverse @exons;
                @cdss = reverse @cdss;
            }

            #            my $last_exon = pop @exons;
            my $last_cds = pop @cdss;


            $track->arrow(
                id => idfy($gene->id),
                x => $gene->start,
                to => $gene->end,
                -strand => $gene->strand,
                class => "gene",
                -layout => {
#                    arrow_rel_height => 3,
#                    arrow_rel_width => 2.4,
                    feature_rel_height => .2,

                },
            );

            $track->arrow(
                id => idfy($last_cds->id),
                class => "CDS",
                x => $last_cds->start,
                to => $last_cds->end,
                -strand => $last_cds->strand,
                -layout => {
                    feature_rel_height => .8,
                    arrow_rel_width => .5,
                },
            );


            foreach (@cdss) {
                $track->block(
                    id => idfy($_->id),
                    class => "CDS",
                    x => $_->start,
                    to => $_->end,
                    -strand => $_->strand,
                    -layout => {
                        feature_rel_height => .8,
                    },
                );
            }


        }
    }
}


=head2 bam2svg

=cut

sub bam2svg{
    my (%p) = @_;
    $L->info("Processing BAM\t[$p{bam}]");

    my $track = $cvs->track(
        -type => "bam",
	class => "reads",
        -layout => {
            track_row_height => 200,
            track_padding => 400,
        },
    );

    # init sam parser
    my $sam_cmd = "$opt{samtools} view -h $p{bam} |";
    $L->debug($sam_cmd);
    open(SAM, $sam_cmd) or $L->logdie($!);
    my $sp = Sam::Parser->new(fh => \*SAM);

    my $clen = 50000;
    my @caln; # cache alignments that are $clen close to each other in a buffer
              # first to allow to merge them into single graphical units
    my %cids; # cache ids of cached alignments



    open(SAM, "$opt{samtools} view $p{bam} $opt{region} |") or $L->logdie($!);
    while(my $aln = $sp->next_aln()){
        next if $aln->is(0x4);# | 0x100 | 0x800); # unmapped or secondary or supplementary

        if ( exists $cids{$aln->qname} ) {
            push @{$cids{$aln->qname}}, $aln;
        }else {
            $cids{$aln->qname} = [$aln];
            push @caln, $aln;
        }

        # process aln that run out of cache scope
        while ($caln[0]->pos < $aln->pos - $clen) {
            my $caln = shift @caln;
            my @as = @{delete $cids{$caln->qname}};

            if (@as == 1) { # single alignment
                $track->block(
                    id => idfy($caln->qname),
                    x => $caln->pos,
                    width => length($caln->seq_aligned),
                    -strand => $caln->is(0x16) ? '-' : '+',
                    class => "read",
                );
            } else { # multiple alignments from same read
                track_add_multi_aln($track, @as);
            }
        }
    }

    # process the remaining alignments
    foreach my $caln ( @caln ) {
        my @as = @{delete $cids{$caln->qname}};

        if (@as == 1) { # single alignment
            $track->block(
                id => idfy($caln->qname),
                x => $caln->pos,
                width => length($caln->seq_aligned),
                -strand => $caln->is(0x16) ? '-' : '+',
                class => "read",
            );
        } else { # multiple alignments from same read
            track_add_multi_aln($track, @as);
        }
    }
}

sub track_add_multi_aln{
    my ($track, @as) = @_;
    for (my $i =0; $i<$#as; $i++ ) {
        $L->info(join(" ", map{$_->pos}@as));

        my $end = $as[$i]->pos + length($as[$i]->seq_aligned);
        $track->block(
            id => idfy($as[$i]->qname),
            x => $as[$i]->pos,
            width => length($as[$i]->seq_aligned),
            -strand => $as[$i]->is(0x16) ? '-' : '+',
            class => "read",
        );

        $track->block(
            id => idfy($as[$i]->qname),
            x => $end+4,
            width => ($as[$i+1]->pos - $end -8) ,
            class => "gap",
            -layout => {
                feature_rel_height => .2,
            },
        );
    }

    $track->block(
        id => idfy($as[-1]->qname),
        x => $as[-1]->pos,
        width => length($as[-1]->seq_aligned),
        -strand => $as[-1]->is(0x16) ? '-' : '+',
        class => "read",
    );
}



sub fasta2svg{
    my (%p) = @_;

    $L->info("Processing FASTA\t[$opt{fa}]");

    unless ( -e $opt{fa}.".fai") {
        qx($opt{samtools} faidx $opt{fa});
    }

    my $fa = Fasta::Seq->new(scalar qx($opt{samtools} faidx $opt{fa} $opt{region}));
    $opt{id} = $opt{region};
    if ( defined $opt{id} ) {
        $opt{id} =~ s/:([0-9,]+)(?:-[0-9,]+)$//;
        $opt{from} = $1 || 0;
        $opt{from} =~ s/,//g;
    }

    $opt{to} = $opt{from} + length($fa->seq);

    my $axis_track = $cvs->track(
        -layout => {
            track_padding => 400,
            track_row_height => 200,
            axis_tick_height => 100,
        }
    );

    $axis_track->axis(
        x => $opt{from},
        to => $opt{to},
        class => "axis",
    );

    # $axis_track->text(
    #     x => $opt{from}+200,
    #     y => 500,
    #     "font-size" => 300,
    #     "font-family" => "Fira Mono",
    #     "font-weight" => "bold"
    # )->cdata("GC");

    # GC
    my $faf = File::Temp->new( SUFFIX => '.fa' )->filename;
    my $w = 50;
    qx($opt{samtools} faidx $opt{fa} $opt{region} > $faf);
    open(my $gh, "seq-gc -w $w $faf | cut -f2 |") or $L->logdie($!);
    my @y = <$gh>; chomp(@y);
    close $gh;

    my @x;
    my $ww = $opt{from}+$w/2;
    $x[0] = $ww;
    for (my $i=1; $i<@y; $i++) {
        $x[$i] = ($ww+=$w);
    }

    my $gc_track = $cvs->track(
        -type => 'plot',
        -layout => {
            track_padding => 400,
            track_height => 1000,
        }
    );

    $gc_track->curve(
        x => \@x,
        y => \@y,
        -ymin => 0,
        -ymax => 1,
        -fillable => 1,
    );

    my $median = (sort{$a<=>$b}@y)[@y/2];
    $gc_track->curve(
        x => [$opt{from}, $opt{to}],
        y => [$median,$median],
        -ymin => 0,
        -ymax => 1,
        style => {
            'stroke-dasharray' => "50,100",
        }
    );
}







##---------------------------------------------------------------------------##
# auxiliaries
##---------------------------------------------------------------------------##

=head2 bin

Return full binary path based on $opt{<bin_path}.

=cut

sub bin{
    my ($bin) = @_;
    if (exists $opt{$bin."_path"} && $opt{$bin."_path"}) {
        return $opt{$bin."_path"}."/".$bin;
    } else {
        return $bin;
    }
}

=head2 check_binary

Check whether a required binary (and version) exists.

=cut


sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
        if ($fbin = which($bin)) {
            $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
        } else {
            $L->logdie("Binary '$bin' neither in PATH nor executable");
        }
    }

    $bin = basename($fbin);

    my $v;
    if ($ver) {
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";

        my $vs = qx($fbin $ver->[0]);
        if ($? or ! $vs) {
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }

        ($v) = $vs =~ /(\S+?)\D*$/m;

        if (version->parse($v) < version->parse($ver->[1])) {
            $L->logdie("Version $v of '$bin' < $v");
        }

    }

    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));

}


=head2 _overlaps_ranges

Test if a value/range overlaps a given set of ranges. ranges are expected in
[FROM, TO] format.

  _is_in_range(5, [[0, 3], [4,7]])
  _is_in_range([2,2], [[0, 3], [4,7]])

=cut

sub _overlaps_ranges{
    my ($c, $ranges) = @_;
    die __PACKAGE__."::_is_in_range: requires exactly to arguments: VALUE or RANGE[OFFSET, LENGTH],  RANGES[[OFFSET, LENGTH][OFFSET, LENGTH]]" unless @_ == 2;

    if (ref $c eq "ARRAY") {
        my $c1 = $c->[0];
        my $c2 = $c->[1];
        for my $r (@$ranges){
            if (
                ($c1 >= $r->[0] && $c1 <= $r->[1]) ||
                ($c2 >= $r->[0] && $c2 <= $r->[1])
            ){
                return 1;
            }
        }
    }elsif (! ref $c) {
        for my $r (@$ranges){
            return 1 if $c >= $r->[0] && $c <= $r->[1];
        }
    }else {
        die __PACKAGE__."::_is_in_range: first arguments needs to be SCALAR or ARRAY ref";
    }
    return 0;
}

sub unspecial{
    my ($string) = @_;
    $string =~ s/[^-\w]/_/g;
    return $string;
}

sub idfy{
    my ($id) = @_;
    my $oid = $id = unspecial($id);

    my $x = 1;
    while ($cvs->getElementByID( $id )){
        $x++;
        $id = "$oid:$x";
    }
    return $id;
}

__DATA__
/*rect{
    fill: black;
}*/
.reads {
    fill: chocolate;
}
.reads .rc {
    fill: brown;
}
.gene {
    fill: black;
}
.gene.rc {
    fill: black;
}
.CDS {
    fill: mediumslateblue;
    fill-opacity: 0.8;
}
.axis{
    stroke: black;
    stroke-width: 20;
}
.curve {
    fill: grey;
}
.gap {
    fill: black;
}
#track_2{
    fill: #cccccc;
}

#track_4 .CDS{
    fill: palevioletred;
    fill-opacity: 0.8;
}

#track_5.reads, #track_5.reads .rc{
    fill: green;
}

#track_6.reads{
    fill: #fb8b00;
}
#track_6.reads .rc{
    fill: #bc6800;
}

#track_7.reads{
    fill: #aaaa00;
}
#track_7.reads .rc{
    fill: #cccc00;
}
